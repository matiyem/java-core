package com.example.threadSafety.service;

/*
    Create by Atiye Mousavi 
    Date: 1/18/2022
    Time: 12:19 PM
**/
public class ObjectLockCounter {
//    هنگامی که یک رشته یک متد همگام را فرا می خواند، قفل ذاتی را به دست می آورد. پس از اینکه thread اجرای متد را به پایان رساند، قفل را آزاد می‌کند، بنابراین به رشته‌های دیگر اجازه می‌دهد قفل را بدست آورند و به متد دسترسی پیدا کنند.
//    در یک زمینه چند رشته ای، اصطلاح مانیتور فقط اشاره ای به نقشی است که قفل بر روی شی مرتبط انجام می دهد، زیرا دسترسی انحصاری به مجموعه ای از روش ها یا عبارات مشخص را اعمال می کند.
//
//هنگامی که یک رشته یک متد همگام را فرا می خواند، قفل ذاتی را به دست می آورد. پس از اینکه thread اجرای متد را به پایان رساند، قفل را آزاد می‌کند، بنابراین به رشته‌های دیگر اجازه می‌دهد قفل را بدست آورند و به متد دسترسی پیدا کنند.
//    گاهی اوقات، همگام سازی کل یک روش ممکن است بیش از حد باشد، اگر فقط لازم باشد بخشی از متد را ایمن کنیم.

//    مثال بی اهمیت است، اما نشان می دهد که چگونه یک عبارت همگام سازی شده ایجاد کنید. با فرض اینکه روش اکنون چند عملیات اضافی را انجام می‌دهد، که نیازی به همگام‌سازی ندارند، ما فقط بخش مربوط به تغییر حالت را با قرار دادن آن در یک بلوک همگام‌سازی شده همگام‌سازی کردیم.
//
//برخلاف روش‌های همگام‌سازی‌شده، عبارات همگام‌سازی شده باید شیئی را که قفل ذاتی را ارائه می‌کند، معمولاً این مرجع، مشخص کند.
//
//همگام سازی گران است، بنابراین با این گزینه، ما فقط می توانیم قسمت های مربوطه یک متد را همگام سازی کنیم.

    private int counter;
    private final Object lock=new Object();

    public ObjectLockCounter(){
        this.counter=0;
    }
    public void incrementCounter(){
        //روش دیگر thread-safe بودن استفاده از  synchronized است
        synchronized (lock){
            counter +=1;
        }
    }
    public int getCounter(){
        synchronized (lock){
            return counter;
        }
    }
}
